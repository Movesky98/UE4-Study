26. C++에서 UI클래스 액세스하기

# 이번 파트는 C++ 내에서 비 C++클래스를 파악할 것임.
- C++ 내에서 블루프린트 클래스에 대한 참조를 확보해야함.
- C++ 내에서 블루프린트 클래스를 참조하는 방법
- UMG 모듈과 C++에 추가될 수 있는 모듈을 포함하는 방법
에 대해 알아보자

# 이상적으로, 우리는 완전하게 C++ 내에서 메뉴를 만들고 실행하고 싶다.
- 대부분의 로직을 C++로 만들면 블루프린트에 의존할 필요가 적어짐.
- 이를 위해 블루프린트 클래스를 확보하여, 인스턴스를 생성할 수 있도록 함.
- 블루프린트 클래스를 만드는 것은 C++ 클래스만큼 쉽지 않음(#include)

# 블루프린트 클래스를 얻으려면 무엇을 해야할까
- 문자열 참조를 사용해야 함.
- FClassFinder를 사용하여 다른 방식으로 클래스를 얻어야 함.

# FClassFinder
- 문자열 참조를 사용해 블루프린트 클래스를 찾을 수 있게 해주는 클래스
- 형태 : static COnstructorHelpers::FClassFinder<클래스 이름> 변수이름(TEXT("경로"));
- 생성자 내에서 만들어야 함.

# UI를 생성하는 코드는 어디서 작성해야 할까
- GameInstance가 적절하다.
- PlayerController당 하나씩 생성되며, 각 유저들의 인터페이스를 관리하기 용이하기 때문


# UMG 모듈을 포함시키는 법
- 프로젝트명.Build.cs 파일에서 PublicDependencyModuleNames.AddRange()에 "UMG" 추가  
- PublicDependencyModuleNames는 프로젝트가 의존하는 언리얼 엔진 모듈 리스트를 
  보여준다.
- 모듈을 추가 -> VS 에디터를 닫음 -> 프로젝트 폴더로 이동 -> uproject를 이용해
  'Generate Visual Studio project files' 실행
- 이후 필요한 cpp 파일에서 '#include "Blueprint/UserWidget"' 작성해주면 됨

# c++에서 UserWidget을 어떻게 사용할까
- 헤더파일에 Widget을 저장할 private 변수를 생성한다.
- 이 때, FClassFinder< T > 변수명 에 맞춰서 (T = TSubClassOf<>)
  TSubclassOf<class UUserWidget> 변수명 <- 이처럼 선언해 준다.
- 이후, FClassFinder을 이용해 위젯을 찾은 뒤 전처리 검사를 해주고 문제가 없으면 
- private 변수에 FClassFinder로 찾은 위젯을 넣어주면 됨  

