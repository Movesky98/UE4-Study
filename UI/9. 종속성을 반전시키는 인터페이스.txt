35. 종속성을 반전시키는 인터페이스

# 버튼을 클릭하였을 때, 이벤트를 발생시키는 방법
- 간단한 방법으로 하지않고 메뉴시스템이 완전한 별도의 플러그인이 되도록 만들것임
- 이를 위해 종속성 주입(Defendency injection) / 종속성 반전 (Defendency inversion)
  인터페이스에 대한 내용을 배울 것임.

# 메인메뉴가 GameInstance에 있는 Host / Join을 사용하도록 만들자잇
- 단순히 GameInstance를 호출한다면 망할 수 있음
- 다른 게임의 GameInstance를 다를 수도
- 이는 매번 GameInstance에 따라 MenuSystem을 변경해야할 수 있음
- 화가나는 상황

# 종속성 
@ 개요
 - [Game] -> [MenuSystem] 과 같은 관계가 있다고 해보자
 - 우리는 게임에 메뉴시스템을 포함시키기 위해, 따로 코드를 다시 작성하거나
   메뉴 시스템의 코드를 변경할 필요가 없어진다.
 - 메뉴시스템은 단순히 플로그인으로 사용되기 때문에 [Game] 과 [MenuSystem] 사이에
   끼우기만 하면 게임이 통합될 수 있어야함.
 - 이러한 종속성을 [Compile-Time Dependency] 라고 함.
 - 다른 타입으로는 [Run-Time Dependency]라고 하며 양방향으로 진행됨.
  -> 게임 플레이 기능을 활성화 시키는 버튼이 메뉴에 있고
  -> 반대의 경우도 있는 경우. 즉, 게임에서 메뉴시스템을 시작할 수 있어야 함.

# 종속성 반전을 통해 이게 어떻게 되는지 알아보자
@ 종속성 반전
 - [GameInstance] <--- [MainMenu] : Includes + Calls로 이루어져 있기에
   컴파일 타임 종속성이다.
 - 그 이후, 런타임에 호출 종속성이 생긴다. 
   (런타임에 MainMenu는 GameInstance가 필요)
   (컴파일타임에는 MainMenu에 GameInstance가 필요)

 - 따라서, 우리는 GameInstance가 없을 수도 있는 상황에서 필요하다고 하는 'Calls'를 
   없애볼 것임
 - 이를 위해 인터페이스라는 새로운 개념을 도입함
   인터페이스는 실제로 객체를 만들지 않는다는 점을 제외하면 클래스와 유사함
   단순히 상속용으로 사용할 것임.

 - 따라서 구조는 다음과 같음
   [Interface] -- Includes + Uses --> [MainMenu]
       ↑				  |
 Includes + Implements		  |
        |				  |
[GameInstance]   <---------------- Calls ↲

@ Interface
 - 게임의 일부가 아닌, MainMenu의 일부분
 - GameInstance는 인터페이스를 사용하기보단 포함하는 개념
 - 인터페이스에 Host란 메서드가 있다면, GameInstance가 그걸 받아 구현하는 구조
 - 즉, 인터페이스를 구현하는 것이 GameInstance이며
 - 컴파일 타임에 정의된 인터페이스를 통해 
   런타임에 정의된 실제 GameInstance를 호출할 수 있다는 것을 MainMenu에게 알려줌
 - 이것이 종속성 반전의 개념


# 이를 구현하기 위해, 언리얼에서 인터페이스를 추가해야 한다.
- [콘텐츠 브라우저] -> [C++ 생성] -> [Unreal Interface]
- Unreal Interface를 통해 .h, .cpp 파일을 생성한 후, 헤더파일을 들어가면
  클래스가 두개가 있는 모습을 볼 수 있다.
- 첫번째 클래스는 수정할 필요가 없으며, 두번째 클래스에서 인터페이스를 추가해야한다.

@ 왜 두번째에서 추가해야 할까?
 - 전체 개념은 UObject에서 상속받지 않는 한 
   언리얼은 우리의 인터페이스에 대해 알 수 없다.
 - 다수의 UObject에서 상속받고 싶지는 않으므로
   GameInstance에서 UMenuInterface를 상속하면 
   UGameInstance / UMenuInterface 둘 다 상속되는데,
   이는 언리얼 상속 시스템 측면에서 조금 이상하게 느껴진다.

 - 따라서, 우리는 IMenuInterface를 상속해야 한다.
 - IProejctnameInterface의 경우, 부모가 없기 때문에 
   여러 항목이 동일한 부모를 가질 수 있는
 - '다이아몬드 상속 문제' 를 발생시키지 않는다. (이게 중요)

 - 이후, 필요한 함수들을 선언해주면 된다 (인터페이스에 맞게, virtual)
 - 가상함수는 인터페이스에서, 구현은 GameInstance를 받은
   MainMenu에서 (순수 가상함수의 개념을 사용)
   virtual void 이름() = 0;

# 순수가상함수
 - 간단하게, 부모클래스에서 가상함수의 선언을, 구현은 상속받은 클래스에서



